#admin_page
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from PIL import Image, ImageTk # type: ignore
from tkcalendar import DateEntry # type: ignore
import sqlite3
import os
import re
from datetime import datetime
import customtkinter as ctk # type: ignore
from io import BytesIO
import json
def load_current_user():
    try:
        with open("current_user.json", "r") as f:
            data = json.load(f)
            return data["current_user"]
    except FileNotFoundError:
        return None  # ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ

# ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô‡∏Å‡πá‡πÑ‡∏î‡πâ‡πÉ‡∏ô home_page.py
current_user = load_current_user()

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å current_user
def show_admin_page():
    global current_user  # ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ global ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å login.py

    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
    print("‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô:", current_user)  # ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ã‡∏•

    # ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô GUI ‡πÄ‡∏ä‡πà‡∏ô Label ‡πÉ‡∏ô tkinter
    label = tk.Label(root, text=f"‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö {current_user}", font=("Arial", 16))
    label.pack(pady=20)

# ------------------ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ ------------------
def center_window(window, width, height):
    window.update_idletasks()
    screen_width = window.winfo_screenwidth()
    screen_height = window.winfo_screenheight()
    x = int((screen_width / 2) - (width / 2))
    y = int((screen_height / 2) - (height / 2))
    window.geometry(f"{width}x{height}+{x}+{y}")

# ------------------ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î ------------------
def load_image(path, size):
    try:
        image = Image.open(path)
        image = image.resize(size, Image.Resampling.LANCZOS)
        return ImageTk.PhotoImage(image)
    except Exception as e:
        print(f"Error loading image: {e}")
        return None

# =============================================================================
#                    Main Admin Page / Home Admin Panel
# =============================================================================

class AdminPage:
    """
    ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏ù‡∏±‡πà‡∏á Admin
    - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (User)
    - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á (Delivery address)
    - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (Product)
    - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠
    - ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (Sales Summary)
    - ‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    - user activity
    """
    
    def __init__(self, root):
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        self.root = tk.Toplevel(root)
        self.root.title("Admin Panel")
        self.center_window(self.root, 1200, 800)  # Call the center_window method here
        self.root.configure(bg="#e0f7ff")
        

        # ‡πÅ‡∏ñ‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô (Navigation Bar)
        self.nav_frame = tk.Frame(self.root, bg="#004aad", height=30)
        self.nav_frame.pack(fill="x")
        

        # ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ö‡∏ô Nav Bar
        self.buttons = {
            "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ": self.show_user_info,
            "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠": self.show_order_items,
            "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤": self.show_products,
            "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠": self.show_purchase_history,
            "‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢": self.show_sales_summary,
            "‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô": self.show_payment_slips,  # Added button for payment slips
            "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ": self.show_user_activity  # Added button for user activity
        }

        for text, command in self.buttons.items():
            btn = tk.Button(
                self.nav_frame,
                text=text,
                font=("KhanoonThin", 15),
                bg="#004aad",
                fg="white",
                bd=0,
                command=command,
                activebackground="#003366",
                cursor="hand2",
                padx=10, pady=5
            )
            btn.pack(side="left", padx=10, pady=5)

        # ‡πÄ‡∏ü‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á / ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
        self.content_frame = tk.Frame(self.root, bg="#e0f7ff")
        self.content_frame.pack(fill="both", expand=True)

        # ‡∏™‡πà‡∏ß‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° Log Out ‡πÅ‡∏•‡∏∞ Exit
        self.bottom_frame = tk.Frame(self.root, bg="#e0f7ff", height=50)
        self.bottom_frame.pack(fill="x", side="bottom")

        logout_button = tk.Button(
            self.bottom_frame,
            text="Log Out",
            font=("Wonderful Future", 14),
            bg="#f39c12",
            fg="white",
            command=self.logout,
            cursor="hand2",
            padx=10, pady=5
        )
        logout_button.pack(side="left", padx=20, pady=10)

        exit_button = tk.Button(
            self.bottom_frame,
            text="Exit",
            font=("Wonderful Future", 14),
            bg="#c0392b",
            fg="white",
            command=self.root.destroy,
            cursor="hand2",
            padx=10, pady=5
        )
        exit_button.pack(side="right", padx=20, pady=10)

        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
        self.show_user_info()

    def center_window(self, window, width, height):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á"""
        window.update_idletasks()
        screen_width = window.winfo_screenwidth()
        screen_height = window.winfo_screenheight()
        x = int((screen_width / 2) - (width / 2))
        y = int((screen_height / 2) - (height / 2))
        window.geometry(f"{width}x{height}+{x}+{y}")

    def clear_content(self):
        """‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ß‡∏¥‡∏î‡πÄ‡∏à‡πá‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô content_frame"""
        for widget in self.content_frame.winfo_children():
            widget.destroy()

    # -------------------------------------------------------------------------
    #                          1) ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (User Info)
    # -------------------------------------------------------------------------
    # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Treeview
    def show_user_info(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (mangauser) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏•‡∏ö"""
        self.clear_content()

        # ‡πÅ‡∏ñ‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        search_frame = tk.Frame(self.content_frame, bg="#e0f7ff")
        search_frame.pack(pady=10)

        tk.Label(search_frame, text="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:", font=("KhanoonThin", 12), bg="#e0f7ff").pack(side="left", padx=5)
        self.search_var = tk.StringVar()
        search_entry = tk.Entry(search_frame, textvariable=self.search_var, font=("KhanoonThin", 12), width=30)
        search_entry.pack(side="left", padx=5)

        tk.Button(
            search_frame,
            text="üîç",
            font=("KhanoonThin", 14),
            bg="#2980b9",
            fg="white",
            command=self.search_user,
            cursor="hand2",
            padx=10, pady=5
        ).pack(side="left", padx=5)

        # ‡∏õ‡∏∏‡πà‡∏° ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏•‡∏ö
        action_frame = tk.Frame(self.content_frame, bg="#e0f7ff")
        action_frame.pack(pady=5)

        tk.Button(
            action_frame,
            text="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
            font=("KhanoonThin", 12),
            bg="#27ae60",
            fg="white",
            command=self.add_user,
            cursor="hand2",
            padx=10, pady=5
        ).pack(side="left", padx=10)

        tk.Button(
            action_frame,
            text="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
            font=("KhanoonThin", 12),
            bg="#f1c40f",
            fg="white",
            command=self.edit_user,
            cursor="hand2",
            padx=10, pady=5
        ).pack(side="left", padx=10)

        tk.Button(
            action_frame,
            text="‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
            font=("KhanoonThin", 12),
            bg="#e74c3c",
            fg="white",
            command=self.delete_user,
            cursor="hand2",
            padx=10, pady=5
        ).pack(side="left", padx=10)

        # Treeview
        columns = ("ID", "Username", "First Name", "Last Name", "Birth Date", "Email", "Phone Number", "Password")
        self.user_tree = ttk.Treeview(self.content_frame, columns=columns, show='headings', height=15)
        for col in columns:
            self.user_tree.heading(col, text=col)
            if col == "ID":
                self.user_tree.column(col, width=50, anchor='center')
            elif col == "Username":
                self.user_tree.column(col, width=100, anchor='center')
            elif col in ["First Name", "Last Name"]:
                self.user_tree.column(col, width=100, anchor='center')
            elif col == "Birth Date":
                self.user_tree.column(col, width=100, anchor='center')
            elif col == "Email":
                self.user_tree.column(col, width=200, anchor='center')
            elif col == "Phone Number":
                self.user_tree.column(col, width=120, anchor='center')
            elif col == "Password":
                self.user_tree.column(col, width=150, anchor='center')

        scrollbar = ttk.Scrollbar(self.content_frame, orient="vertical", command=self.user_tree.yview)
        self.user_tree.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side='right', fill='y')
        self.user_tree.pack(fill="both", expand=True, padx=20, pady=10)

        # Style
        style = ttk.Style()
        style.configure("Treeview.Heading", font=("KhanoonThin", 12, "bold"))
        style.configure("Treeview", font=("KhanoonThin", 11), rowheight=25)

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å DB ‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á
        self.populate_user_info()

    def populate_user_info(self, query=None):
        """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô treeview"""
        for row in getattr(self, "user_tree", []).get_children():
            self.user_tree.delete(row)

        try:
            conn = sqlite3.connect(r"D:\Project Pythonnnnnn\bookstore.db")
            cursor = conn.cursor()
            if query:
                cursor.execute(""" 
                    SELECT id, username, fname, lname, birth, email, phonenum, password, role
                    FROM mangauser
                    WHERE username LIKE ? OR fname LIKE ? OR lname LIKE ?
                """, (f'%{query}%', f'%{query}%', f'%{query}%'))
            else:
                cursor.execute(""" 
                    SELECT id, username, fname, lname, birth, email, phonenum, password, role 
                    FROM mangauser
                """)
            rows = cursor.fetchall()
            conn.close()

            for row in rows:
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Treeview ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á password ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á
                display_row = row[:-1]  # ‡∏•‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á
                self.user_tree.insert("", tk.END, values=display_row)
        except Exception as e:
            messagebox.showerror("Database Error", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")


    def search_user(self):
        query = self.search_var.get().strip()
        self.populate_user_info(query)

    def add_user(self):
        AddEditUserWindow(self, "add")

    def edit_user(self):
        selected_item = self.user_tree.focus()
        if not selected_item:
            messagebox.showwarning("Selection Error", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
            return
        user_data = self.user_tree.item(selected_item)['values']
        AddEditUserWindow(self, "edit", user_data)

    def delete_user(self):
        selected_item = self.user_tree.focus()
        if not selected_item:
            messagebox.showwarning("Selection Error", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö")
            return
        user_data = self.user_tree.item(selected_item)['values']
        confirm = messagebox.askyesno("Confirm Delete", f"‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ '{user_data[1]}' ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")
        if confirm:
            try:
                conn = sqlite3.connect(r"D:\Project Pythonnnnnn\bookstore.db")
                cursor = conn.cursor()
                cursor.execute("DELETE FROM mangauser WHERE id = ?", (user_data[0],))
                conn.commit()
                conn.close()
                self.populate_user_info()
                messagebox.showinfo("Success", "‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            except Exception as e:
                messagebox.showerror("Database Error", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    
    # -------------------------------------------------------------------------
    #                          2) ‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô (Payment Slips)
    # -------------------------------------------------------------------------
    def show_payment_slips(self):
        """Display payment slips in the Treeview."""
        self.clear_content()
        self.display_payment_slips()
        
        search_frame = tk.Frame(self.content_frame, bg="#e0f7ff")
        search_frame.pack(pady=10)

        tk.Label(search_frame, text="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ id:", font=("KhanoonThin", 12), bg="#e0f7ff").pack(side="left", padx=5)
        self.search_var = tk.StringVar()
        search_entry = tk.Entry(search_frame, textvariable=self.search_var, font=("KhanoonThin",15), width=30)
        search_entry.pack(side="left", padx=5)

        tk.Button(
        search_frame,
        text="üîç",
        font=("KhanoonThin", 15),
        bg="#2980b9",
        fg="white",
        command=self.search_order,  # 
        cursor="hand2",
        padx=15, pady=10
        ).pack(side="left", padx=5)


    def clear_content(self):
        """Clear previous content before displaying new data."""
        for widget in self.content_frame.winfo_children():
            widget.destroy()

    def display_payment_slips(self):
        """Set up Treeview for displaying payment slip data."""
        columns = ("Slip ID", "Order ID", "Upload Time")
        self.payment_slip_tree = ttk.Treeview(self.content_frame, columns=columns, show="headings", height=8)
        
        for col in columns:
            self.payment_slip_tree.heading(col, text=col)
            self.payment_slip_tree.column(col, width=150, anchor='center')

        scrollbar = ttk.Scrollbar(self.content_frame, orient="vertical", command=self.payment_slip_tree.yview)
        self.payment_slip_tree.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side='right', fill='y')
        self.payment_slip_tree.pack(fill="both", expand=True, padx=20, pady=10)

        # Canvas ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏™‡∏•‡∏¥‡∏õ
        self.image_canvas = tk.Canvas(self.content_frame, width=330, height=400, bg="#e0f7ff", highlightthickness=0)
        self.image_canvas.pack(pady=20)

        # Fetch payment slip data and populate the Treeview
        self.populate_payment_slips()

    def populate_payment_slips(self, order_id_filter=None):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ Order ID ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ"""
        if not hasattr(self, "payment_slip_tree"):
            return  # ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô error ‡∏ñ‡πâ‡∏≤ Treeview ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á

        for row in self.payment_slip_tree.get_children():
            self.payment_slip_tree.delete(row)

        try:
            conn = sqlite3.connect(r"D:\Project Pythonnnnnn\bookstore.db")
            cursor = conn.cursor()

            # üîé ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Order ID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            if order_id_filter:
                cursor.execute("SELECT slip_id, order_id, upload_time FROM payment_slips WHERE order_id = ?", (order_id_filter,))
            else:
                cursor.execute("SELECT slip_id, order_id, upload_time FROM payment_slips")

            rows = cursor.fetchall()
            conn.close()

            if not rows:
                messagebox.showinfo("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå", "‡πÑ‡∏°‡πà‡∏°‡∏µ Order ID ‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡∏Å‡∏£‡∏≠‡∏Å")
                return

            for row in rows:
                slip_id, order_id, upload_time = row
                item = self.payment_slip_tree.insert("", "end", values=(slip_id, order_id, upload_time))

                # ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ñ‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                if order_id_filter:
                    self.payment_slip_tree.selection_set(item)
                    self.payment_slip_tree.focus(item)
                    self.display_selected_payment_slip(order_id_filter)

        except Exception as e:
            messagebox.showerror("Database Error", f"Error fetching payment slips: {e}")

        # üìå ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• -> ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        self.payment_slip_tree.bind("<ButtonRelease-1>", self.display_selected_payment_slip)


    def display_selected_payment_slip(self, event_or_order_id):
        """Display the selected payment slip as an image (‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏¥‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤)."""
        if isinstance(event_or_order_id, str):  # üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å Order ID
            order_id = event_or_order_id
        else:  # üìå ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà Treeview
            selected_item = self.payment_slip_tree.focus()
            if not selected_item:
                return
            slip_data = self.payment_slip_tree.item(selected_item)['values']
            if not slip_data:
                return
            order_id = slip_data[1]  # ‡∏î‡∏∂‡∏á Order ID ‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å

        try:
            conn = sqlite3.connect(r"D:\Project Pythonnnnnn\bookstore.db")
            cursor = conn.cursor()
            cursor.execute("SELECT slip FROM payment_slips WHERE order_id = ?", (order_id,))
            result = cursor.fetchone()
            conn.close()

            if result:
                slip_image_data = result[0]
                self.show_image_from_data(slip_image_data)
            else:
                messagebox.showwarning("No Image", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏™‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Order ID ‡∏ô‡∏µ‡πâ")

        except Exception as e:
            messagebox.showerror("Database Error", f"Error loading image: {e}")

    def show_image_from_data(self, image_data):
        """Convert binary data to image and display in the canvas."""
        try:
            # Convert binary data to an image
            image = Image.open(BytesIO(image_data))
            image = image.resize((350, 400), Image.LANCZOS)  
            photo = ImageTk.PhotoImage(image)

            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏†‡∏≤‡∏û‡πÉ‡∏ô Canvas
            self.image_canvas.delete("all")  # ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô
            self.image_canvas.create_image(0, 0, image=photo, anchor="nw")
            self.image_canvas.image = photo  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô garbage collection

        except Exception as e:
            messagebox.showerror("Image Error", f"Error displaying image: {e}")

    def search_order(self):
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Order ID ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ö‡∏ô‡∏±‡πâ‡∏ô"""
        order_id = self.search_var.get().strip()  
        if order_id:
            self.populate_payment_slips(order_id_filter=order_id)
        else:
            self.populate_payment_slips()  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î


    # -------------------------------------------------------------------------
    #                          3) ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (User Activity)
    # -------------------------------------------------------------------------
    def show_user_activity(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
        self.clear_content()
        self.display_user_activity()

        search_frame = tk.Frame(self.content_frame, bg="#e0f7ff")
        search_frame.pack(pady=10)

        tk.Label(search_frame, text="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Username:", font=("KhanoonThin", 12), bg="#e0f7ff").pack(side="left", padx=5)
        self.search_var = tk.StringVar()
        search_entry = tk.Entry(search_frame, textvariable=self.search_var, font=("KhanoonThin", 12), width=30)
        search_entry.pack(side="left", padx=5)

        tk.Button(
            search_frame,
            text="üîç",
            font=("KhanoonThin", 14),
            bg="#2980b9",
            fg="white",
            command=self.search_user_activity,  
            cursor="hand2",
            padx=10, pady=5
        ).pack(side="left", padx=5)

        self.display_user_activity()
    
    def clear_content(self):
        """Clear previous content before displaying new data."""
        for widget in self.content_frame.winfo_children():
            widget.destroy()

    def display_user_activity(self, username_filter=None):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á `user_activity` ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Treeview"""
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ self.user_activity_tree ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        if not hasattr(self, "user_activity_tree") or not self.user_activity_tree.winfo_exists():
            self.clear_content()
            
            columns = ("ID", "Username", "Action", "Timestamp")
            self.user_activity_tree = ttk.Treeview(self.content_frame, columns=columns, show="headings", height=15)

            for col in columns:
                self.user_activity_tree.heading(col, text=col)
                self.user_activity_tree.column(col, width=150, anchor="center")

            scrollbar = ttk.Scrollbar(self.content_frame, orient="vertical", command=self.user_activity_tree.yview)
            self.user_activity_tree.configure(yscrollcommand=scrollbar.set)
            scrollbar.pack(side="right", fill="y")
            self.user_activity_tree.pack(fill="both", expand=True, padx=20, pady=10)
            
        # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        for row in self.user_activity_tree.get_children():
            self.user_activity_tree.delete(row)
        try:
            conn = sqlite3.connect("D:/Project Pythonnnnnn/bookstore.db")
            cursor = conn.cursor()
            if username_filter:
                cursor.execute("SELECT id, username, action, timestamp FROM user_activity WHERE username LIKE ?", (f"%{username_filter}%",))
            else:
                cursor.execute("SELECT id, username, action, timestamp FROM user_activity")
            rows = cursor.fetchall()
            conn.close()
            if not rows:
                messagebox.showinfo("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Username ‡∏ô‡∏µ‡πâ")
                return
            # üîπ ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
            for row in rows:
                self.user_activity_tree.insert("", "end", values=row)
        except Exception as e:
            messagebox.showerror("Database Error", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {e}")
            return
        if not hasattr(self, "user_activity_tree"):
            columns = ("ID", "Username", "Action", "Timestamp")
            self.user_activity_tree = ttk.Treeview(self.content_frame, columns=columns, show="headings", height=15)

            for col in columns:
                self.user_activity_tree.heading(col, text=col)
                self.user_activity_tree.column(col, width=150, anchor="center")

            scrollbar = ttk.Scrollbar(self.content_frame, orient="vertical", command=self.user_activity_tree.yview)
            self.user_activity_tree.configure(yscrollcommand=scrollbar.set)
            scrollbar.pack(side="right", fill="y")
            self.user_activity_tree.pack(fill="both", expand=True, padx=20, pady=10)

        for row in self.user_activity_tree.get_children():
            self.user_activity_tree.delete(row)

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Treeview
        for row in rows:
            self.user_activity_tree.insert("", "end", values=row)

    def search_user_activity(self):
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á Username ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏"""
        username = self.search_var.get().strip()
        if not hasattr(self, "user_activity_tree") or not self.user_activity_tree.winfo_exists():
            self.display_user_activity()  
        self.display_user_activity(username_filter=username)

    # -------------------------------------------------------------------------
    #                    2) ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á (Delivery Addresses)
    # -------------------------------------------------------------------------
    def show_order_items(self):
        """Display the order items."""
        self.clear_content()
        
        # ‡πÅ‡∏ñ‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        search_frame = tk.Frame(self.content_frame, bg="#e0f7ff")
        search_frame.pack(pady=10)

        tk.Label(search_frame, text="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Order ID:", font=("KhanoonThin", 12), bg="#e0f7ff").pack(side="left", padx=5)
        self.search_var = tk.StringVar()
        search_entry = tk.Entry(search_frame, textvariable=self.search_var, font=("KhanoonThin", 12), width=30)
        search_entry.pack(side="left", padx=5)

        tk.Button(
            search_frame,
            text="üîç",
            font=("KhanoonThin", 14),
            bg="#2980b9",
            fg="white",
            command=self.search_user,  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏° Order ID
            cursor="hand2",
            padx=10, pady=5
        ).pack(side="left", padx=5)

        # Define a Treeview for order items
        self.order_tree = ttk.Treeview(self.content_frame, columns=("order_item_id", "order_id", "book_code", "quantity", "username"), show="headings")
        
        self.order_tree.heading("order_item_id", text="Order Item ID")
        self.order_tree.heading("order_id", text="Order ID")
        self.order_tree.heading("book_code", text="Book Code")
        self.order_tree.heading("quantity", text="Quantity")
        self.order_tree.heading("username", text="Username")
        
        # Set column alignment to center
        for col in ("order_item_id", "order_id", "book_code", "quantity", "username"):
            self.order_tree.column(col, anchor='center')  # Align all columns to the center
        
        # Add Scrollbar
        vertical_scrollbar = ttk.Scrollbar(self.content_frame, orient="vertical", command=self.order_tree.yview)
        horizontal_scrollbar = ttk.Scrollbar(self.content_frame, orient="horizontal", command=self.order_tree.xview)
        
        self.order_tree.configure(yscrollcommand=vertical_scrollbar.set, xscrollcommand=horizontal_scrollbar.set)
        
        vertical_scrollbar.pack(side='right', fill='y')
        horizontal_scrollbar.pack(side='bottom', fill='x')
        self.order_tree.pack(fill="both", expand=True, padx=20, pady=10)

        # Style for the Treeview
        style = ttk.Style()
        style.configure("Treeview.Heading", font=("KhanoonThin", 12, "bold"))
        style.configure("Treeview", font=("KhanoonThin", 11), rowheight=25)

        # Load data from the database
        self.populate_order_items()

    def search_user(self):
        """Search for order items by Order ID."""
        order_id = self.search_var.get().strip()  # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ Order ID ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å
        if order_id:
            self.populate_order_items(order_id)  # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° Order ID ‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å
        else:
            self.populate_order_items()  # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å Order ID ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

    def populate_order_items(self, order_id=None):
        """Retrieve order item data from the database and display in treeview."""
        for row in self.order_tree.get_children():
            self.order_tree.delete(row)

        try:
            conn = sqlite3.connect(r"D:\Project Pythonnnnnn\bookstore.db")
            cursor = conn.cursor()

            # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° Order ID ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏ Order ID
            if order_id:
                cursor.execute("SELECT * FROM order_item1 WHERE order_id LIKE ?", (f'%{order_id}%',))
            else:
                cursor.execute("SELECT * FROM order_item1")  # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á

            rows = cursor.fetchall()
            conn.close()

            for row in rows:
                self.order_tree.insert("", tk.END, values=row)

        except Exception as e:
            messagebox.showerror("Database Error", f"An error occurred: {e}")


    # -------------------------------------------------------------------------
    #                          3) ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (Products)
    # -------------------------------------------------------------------------
    
    def show_products(self):
        self.clear_content()

        # ‡πÅ‡∏ñ‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        search_frame = tk.Frame(self.content_frame, bg="#e0f7ff")
        search_frame.pack(pady=10)

        tk.Label(search_frame, text="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:", font=("KhanoonThin", 14), bg="#e0f7ff").pack(side="left", padx=5)
        self.search_product_var = tk.StringVar()
        search_entry = tk.Entry(search_frame, textvariable=self.search_product_var, font=("KhanoonThin", 12), width=30)
        search_entry.pack(side="left", padx=5)

        tk.Button(
            search_frame,
            text="üîç",
            font=("KhanoonThin", 12),
            bg="#2980b9",
            fg="white",
            command=self.search_product,
            cursor="hand2",
            padx=10, pady=5
        ).pack(side="left", padx=5)

        # ‡∏õ‡∏∏‡πà‡∏° ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏•‡∏ö
        action_frame = tk.Frame(self.content_frame, bg="#e0f7ff")
        action_frame.pack(pady=5)

        tk.Button(
            action_frame,
            text="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
            font=("KhanoonThin", 12),
            bg="#27ae60",
            fg="white",
            command=self.add_product,
            cursor="hand2",
            padx=10, pady=5
        ).pack(side="left", padx=10)

        tk.Button(
            action_frame,
            text="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
            font=("KhanoonThin", 12),
            bg="#f1c40f",
            fg="white",
            command=self.edit_product,
            cursor="hand2",
            padx=10, pady=5
        ).pack(side="left", padx=10)

        tk.Button(
            action_frame,
            text="‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
            font=("KhanoonThin", 12),
            bg="#e74c3c",
            fg="white",
            command=self.delete_product,
            cursor="hand2",
            padx=10, pady=5
        ).pack(side="left", padx=10)

        # Treeview
        # *** ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Image' ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Treeview ***
        columns = ("Code", "Name", "Genre", "Price", "Quantity")
        self.product_tree = ttk.Treeview(self.content_frame, columns=columns, show='headings', height=15)
        for col in columns:
            self.product_tree.heading(col, text=col)
            if col == "Code":
                self.product_tree.column(col, width=80, anchor='center')
            elif col == "Name":
                self.product_tree.column(col, width=250, anchor='w')
            elif col == "Genre":
                self.product_tree.column(col, width=100, anchor='center')
            elif col == "Price":
                self.product_tree.column(col, width=100, anchor='center')
            elif col == "Quantity":
                self.product_tree.column(col, width=80, anchor='center')

        scrollbar = ttk.Scrollbar(self.content_frame, orient="vertical", command=self.product_tree.yview)
        self.product_tree.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side='right', fill='y')
        self.product_tree.pack(side="left", fill="both", expand=True, padx=20, pady=10)

        # *** ‡πÄ‡∏û‡∏¥‡πà‡∏° Canvas ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ***
        self.image_canvas = tk.Canvas(self.content_frame, bg="#e0f7ff", width=290, height=400)
        self.image_canvas.pack(side="right", padx=20, pady=10)

        # *** Binding ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ***
        self.product_tree.bind("<<TreeviewSelect>>", self.display_selected_product_image)

        # Style
        style = ttk.Style()
        style.configure("Treeview.Heading", font=("KhanoonThin", 12, "bold"))
        style.configure("Treeview", font=("KhanoonThin", 11), rowheight=25)

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å DB ‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á
        self.populate_products()

    def populate_products(self, query=None):
        """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô treeview ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö image_path"""
        for row in getattr(self, "product_tree", []).get_children():
            self.product_tree.delete(row)

        try:
            conn = sqlite3.connect(r"D:\Project Pythonnnnnn\bookstore.db")
            cursor = conn.cursor()
            if query:
                cursor.execute("""
                    SELECT code, name, genre, price, quantity, image_path
                    FROM products
                    WHERE code LIKE ? OR name LIKE ? OR genre LIKE ?
                """, (f'%{query}%', f'%{query}%', f'%{query}%'))
            else:
                cursor.execute("""
                    SELECT code, name, genre, price, quantity, image_path
                    FROM products
                """)
            rows = cursor.fetchall()
            conn.close()

            for row in rows:
                # ‡∏ï‡∏±‡∏î image_path ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Treeview
                display_row = row[:-1]  
                self.product_tree.insert("", tk.END, values=display_row)
        except Exception as e:
            messagebox.showerror("Database Error", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

    def display_selected_product_image(self, event):
        """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ô Canvas"""
        selected_item = self.product_tree.focus()
        if not selected_item:
            return

        product_data = self.product_tree.item(selected_item)['values']
        code = product_data[0]

        try:
            conn = sqlite3.connect(r"D:\Project Pythonnnnnn\bookstore.db")
            cursor = conn.cursor()
            cursor.execute("SELECT image_path FROM products WHERE code = ?", (code,))
            result = cursor.fetchone()
            conn.close()

            img_path = result[0] if result else None

            # ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏Å‡πà‡∏≤
            self.image_canvas.delete("all")

            if img_path and os.path.exists(img_path):
                img = load_image(img_path, (300, 300))
                if img:
                    self.image_canvas.create_image(150, 150, image=img, anchor="center")
                    self.image_canvas.image = img  # ‡πÄ‡∏Å‡πá‡∏ö reference ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô garbage collection
                else:
                    self.image_canvas.create_text(150, 150, text="‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û", font=("KhanoonThin", 14))
            else:
                self.image_canvas.create_text(150, 150, text="‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û", font=("KhanoonThin", 14))

        except Exception as e:
            messagebox.showerror("Database Error", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

    def search_product(self):
        query = self.search_product_var.get().strip()
        self.populate_products(query)

    def add_product(self):
        AddEditProductWindow(self, "add")

    def edit_product(self):
        selected_item = self.product_tree.focus()
        if not selected_item:
            messagebox.showwarning("Selection Error", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
            return
        product_data = self.product_tree.item(selected_item)['values']
        # *** ‡∏î‡∏∂‡∏á image_path ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ***
        try:
            conn = sqlite3.connect(r"D:\Project Pythonnnnnn\bookstore.db")
            cursor = conn.cursor()
            cursor.execute("SELECT image_path FROM products WHERE code = ?", (product_data[0],))
            result = cursor.fetchone()
            conn.close()
            image_path = result[0] if result else ""
            # *** ‡∏£‡∏ß‡∏° image_path ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö product_data ***
            full_product_data = list(product_data) + [image_path]
        except Exception as e:
            messagebox.showerror("Database Error", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            return

        AddEditProductWindow(self, "edit", full_product_data)

    def delete_product(self):
        selected_item = self.product_tree.focus()
        if not selected_item:
            messagebox.showwarning("Selection Error", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö")
            return
        product_data = self.product_tree.item(selected_item)['values']
        confirm = messagebox.askyesno("Confirm Delete", f"‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ '{product_data[1]}' ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")
        if confirm:
            try:
                conn = sqlite3.connect(r"D:\Project Pythonnnnnn\bookstore.db")
                cursor = conn.cursor()
                cursor.execute("DELETE FROM products WHERE code = ?", (product_data[0],))
                conn.commit()
                conn.close()
                self.populate_products()
                messagebox.showinfo("Success", "‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            except Exception as e:
                messagebox.showerror("Database Error", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    
    
    # -------------------------------------------------------------------------
    #                        5) ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ (Purchase History)
    # -------------------------------------------------------------------------

    def show_purchase_history(self):
        self.clear_content()

        # ‡πÅ‡∏ñ‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        search_frame = tk.Frame(self.content_frame, bg="#e0f7ff")
        search_frame.pack(pady=10)

        tk.Label(search_frame, text="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:", font=("KhanoonThin", 14), bg="#e0f7ff").pack(side="left", padx=5)
        self.search_purchase_var = tk.StringVar()
        search_entry = tk.Entry(search_frame, textvariable=self.search_purchase_var, font=("KhanoonThin", 12), width=30)
        search_entry.pack(side="left", padx=5)

        tk.Button(
            search_frame,
            text="üîç",
            font=("KhanoonThin", 12),
            bg="#2980b9",
            fg="white",
            command=self.search_purchase_history,
            cursor="hand2",
            padx=10, pady=5
        ).pack(side="left", padx=5)

        # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (‡∏ß‡∏±‡∏ô, ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô, ‡∏õ‡∏µ)
        filter_frame = tk.Frame(self.content_frame, bg="#e0f7ff")
        filter_frame.pack(pady=10)

        # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô
        tk.Label(filter_frame, text="‡∏ß‡∏±‡∏ô:", font=("KhanoonThin", 12), bg="#e0f7ff").pack(side="left", padx=5)
        self.filter_day = tk.StringVar()
        self.filter_day.set("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        day_options = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + [str(i) for i in range(1, 32)]
        day_menu = ttk.Combobox(filter_frame, textvariable=self.filter_day, values=day_options, state="readonly")
        day_menu.pack(side="left", padx=5)

        # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        tk.Label(filter_frame, text="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô:", font=("KhanoonThin", 12), bg="#e0f7ff").pack(side="left", padx=5)
        self.filter_month = tk.StringVar()
        self.filter_month.set("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        month_options = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + [str(i) for i in range(1, 13)]
        month_menu = ttk.Combobox(filter_frame, textvariable=self.filter_month, values=month_options, state="readonly")
        month_menu.pack(side="left", padx=5)

        # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ (‡∏à‡∏≥‡∏Å‡∏±‡∏î 2024-2026)
        tk.Label(filter_frame, text="‡∏õ‡∏µ:", font=("KhanoonThin", 12), bg="#e0f7ff").pack(side="left", padx=5)
        self.filter_year = tk.StringVar()
        self.filter_year.set("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        year_options = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "2024", "2025", "2026"]
        year_menu = ttk.Combobox(filter_frame, textvariable=self.filter_year, values=year_options, state="readonly")
        year_menu.pack(side="left", padx=5)

        # ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        tk.Button(
            filter_frame,
            text="‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
            font=("KhanoonThin", 12),
            bg="#27ae60",
            fg="white",
            command=self.filter_purchase_history,
            cursor="hand2",
            padx=10, pady=5
        ).pack(side="left", padx=5)

        # Treeview
        columns = ("Order ID", "Username", "fullname","‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö", "‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°", "‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î", "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö")
        self.purchase_tree = ttk.Treeview(self.content_frame, columns=columns, show='headings', height=15)
        for col in columns:
            self.purchase_tree.heading(col, text=col)
            if col == "Order ID":
                self.purchase_tree.column(col, width=15, anchor='center')
            elif col == "Username":
                self.purchase_tree.column(col, width=10, anchor='center')
            elif col == "fullname":
                self.purchase_tree.column(col, width=30, anchor='center')
            elif col == "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà":
                self.purchase_tree.column(col, width=80, anchor='center')
            elif col == "‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö":
                self.purchase_tree.column(col, width=60, anchor='center')
            elif col == "‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°":
                self.purchase_tree.column(col, width=25, anchor='center')
            elif col == "‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î":
                self.purchase_tree.column(col, width=10, anchor='center')
            elif col == "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö":
                self.purchase_tree.column(col, width=130, anchor='center')

        scrollbar = ttk.Scrollbar(self.content_frame, orient="vertical", command=self.purchase_tree.yview)
        self.purchase_tree.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side='right', fill='y')
        self.purchase_tree.pack(fill="both", expand=True, padx=20, pady=10)

        # Style
        style = ttk.Style()
        style.configure("Treeview.Heading", font=("KhanoonThin", 12, "bold"))
        style.configure("Treeview", font=("KhanoonThin", 10), rowheight=25)

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å DB ‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á
        self.populate_purchase_history()

    def populate_purchase_history(self, day=None, month=None, year=None, query=None):
        """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô treeview"""
        for row in getattr(self, "purchase_tree", []).get_children():
            self.purchase_tree.delete(row)

        try:
            conn = sqlite3.connect(r"D:\Project Pythonnnnnn\bookstore.db")
            cursor = conn.cursor()

            base_query = """
                SELECT 
                    o.order_id, 
                    o.username, 
                    m.fname || ' ' || m.lname AS fullname,  -- ‡∏£‡∏ß‡∏° fname ‡πÅ‡∏•‡∏∞ lname ‡πÄ‡∏õ‡πá‡∏ô fullname
                    o.order_time, 
                    o.pickup_method, 
                    o.total_price, 
                    o.discount, 
                    o.delivery_address
                FROM 
                    orders o
                JOIN 
                    mangauser m ON o.username = m.username
            """
            conditions = []
            params = []

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° query ‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            if query:
                conditions.append("(o.username LIKE ? OR m.fname LIKE ? OR m.lname LIKE ?)")
                params.extend([f'%{query}%', f'%{query}%', f'%{query}%'])

            # ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏µ
            if year and year != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
                conditions.append("strftime('%Y', o.order_time) = ?")
                params.append(year)

            # ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
            if month and month != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
                conditions.append("strftime('%m', o.order_time) = ?")
                params.append(month.zfill(2))  # ‡πÄ‡∏ï‡∏¥‡∏° 0 ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ (01, 02, ..., 12)

            # ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô
            if day and day != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
                conditions.append("strftime('%d', o.order_time) = ?")
                params.append(day.zfill(2))  # ‡πÄ‡∏ï‡∏¥‡∏° 0 ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ (01, 02, ..., 31)

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if conditions:
                base_query += " WHERE " + " AND ".join(conditions)

            base_query += " ORDER BY o.order_time DESC"

            cursor.execute(base_query, params)
            rows = cursor.fetchall()
            conn.close()

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô Treeview
            for row in rows:
                self.purchase_tree.insert("", tk.END, values=row)

        except Exception as e:
            messagebox.showerror("Database Error", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

    def search_purchase_history(self):
        query = self.search_purchase_var.get().strip()
        day = self.filter_day.get()
        month = self.filter_month.get()
        year = self.filter_year.get()
        self.populate_purchase_history(day, month, year, query)

    def filter_purchase_history(self):
        day = self.filter_day.get()
        month = self.filter_month.get()
        year = self.filter_year.get()
        query = self.search_purchase_var.get().strip()
        self.populate_purchase_history(day, month, year, query)

    # -------------------------------------------------------------------------
    #                           6) ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (Sales Summary)
    # -------------------------------------------------------------------------
        
    def show_sales_summary(self):
        self.clear_content()

        # ‡πÅ‡∏ñ‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        search_frame = tk.Frame(self.content_frame, bg="#e0f7ff")
        search_frame.pack(pady=10)

        tk.Label(search_frame, text="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:", font=("KhanoonThin", 14), bg="#e0f7ff").pack(side="left", padx=5)
        self.search_summary_var = tk.StringVar()
        search_entry = tk.Entry(search_frame, textvariable=self.search_summary_var, font=("KhanoonThin", 12), width=30)
        search_entry.pack(side="left", padx=5)

        tk.Button(
            search_frame,
            text="üîç",
            font=("KhanoonThin", 12),
            bg="#2980b9",
            fg="white",
            command=self.search_show_sales_summary,
            cursor="hand2",
            padx=10, pady=5
        ).pack(side="left", padx=5)

        # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (‡∏ß‡∏±‡∏ô, ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô, ‡∏õ‡∏µ)
        filter_frame = tk.Frame(self.content_frame, bg="#e0f7ff")
        filter_frame.pack(pady=10)

        # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô
        tk.Label(filter_frame, text="‡∏ß‡∏±‡∏ô:", font=("KhanoonThin", 12), bg="#e0f7ff").pack(side="left", padx=5)
        self.filter_day = tk.StringVar()
        self.filter_day.set("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        day_options = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + [str(i) for i in range(1, 32)]
        day_menu = ttk.Combobox(filter_frame, textvariable=self.filter_day, values=day_options, state="readonly")
        day_menu.pack(side="left", padx=5)

        # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        tk.Label(filter_frame, text="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô:", font=("KhanoonThin", 12), bg="#e0f7ff").pack(side="left", padx=5)
        self.filter_month = tk.StringVar()
        self.filter_month.set("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        month_options = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + [str(i) for i in range(1, 13)]
        month_menu = ttk.Combobox(filter_frame, textvariable=self.filter_month, values=month_options, state="readonly")
        month_menu.pack(side="left", padx=5)

        # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ (‡∏à‡∏≥‡∏Å‡∏±‡∏î 2024-2026)
        tk.Label(filter_frame, text="‡∏õ‡∏µ:", font=("KhanoonThin", 12), bg="#e0f7ff").pack(side="left", padx=5)
        self.filter_year = tk.StringVar()
        self.filter_year.set("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        year_options = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "2024", "2025", "2026"]
        year_menu = ttk.Combobox(filter_frame, textvariable=self.filter_year, values=year_options, state="readonly")
        year_menu.pack(side="left", padx=5)

        # ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        self.filter_button = tk.Button(filter_frame, 
            text="‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", 
            font=("KhanoonThin", 12), 
            command=self.apply_filters,
            bg="#27ae60", 
            fg="white",     
            padx=10, pady=5)
        self.filter_button.grid(row=0, column=4, padx=10)


        # Treeview
        columns = ("‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤","‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢", "‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°")
        self.summary_tree = ttk.Treeview(self.content_frame, columns=columns, show='headings', height=15)
        for col in columns:
            self.summary_tree.heading(col, text=col)
            if col == "‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤":
                self.summary_tree.column(col, width=15, anchor='center')
            elif col == "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤":
                self.summary_tree.column(col, width=50, anchor='center')
            elif col == "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà":
                self.summary_tree.column(col, width=50, anchor='center')
            elif col == "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤":
                self.summary_tree.column(col, width=80, anchor='center')
            elif col == "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢":
                self.summary_tree.column(col, width=60, anchor='center')
            elif col == "‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°":
                self.summary_tree.column(col, width=30, anchor='center')

        scrollbar = ttk.Scrollbar(self.content_frame, orient="vertical", command=self.summary_tree.yview)
        self.summary_tree.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side='right', fill='y')
        self.summary_tree.pack(fill="both", expand=True, padx=20, pady=10)

        # Style
        style = ttk.Style()
        style.configure("Treeview.Heading", font=("KhanoonThin", 12, "bold"))
        style.configure("Treeview", font=("KhanoonThin", 10), rowheight=25)

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        self.populate_sales_summary()

    def populate_sales_summary(self, day=None, month=None, year=None, query=None):
        """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô treeview ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        for row in getattr(self, "summary_tree", []).get_children():
            self.summary_tree.delete(row)

        total_quantity = 0  # ‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        total_sales = 0  # ‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

        try:
            conn = sqlite3.connect(r"D:\Project Pythonnnnnn\bookstore.db")
            cursor = conn.cursor()

            query_str = """
                SELECT code, name, genre, price, quantity_removed, (price * quantity_removed) AS total
                FROM products
                WHERE 1=1
            """
            params = []

            # ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° query ‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
            if query:
                query_str += " AND (code LIKE ? OR name LIKE ? OR genre LIKE ?)"
                params += (f'%{query}%', f'%{query}%', f'%{query}%')

            # ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏µ
            if year and year != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
                query_str += " AND strftime('%Y', sold_at) = ?"
                params += (year,)

            # ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
            if month and month != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
                query_str += " AND strftime('%m', sold_at) = ?"
                params += (month.zfill(2),)

            # ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô
            if day and day != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
                query_str += " AND strftime('%d', sold_at) = ?"
                params += (day.zfill(2),)

            query_str += " ORDER BY sold_at DESC"
            cursor.execute(query_str, params)
            rows = cursor.fetchall()
            conn.close()

            for row in rows:
                self.summary_tree.insert("", tk.END, values=row)
                total_quantity += row[4]  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢
                total_sales += row[5]  # ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°

            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏µ‡πÅ‡∏î‡∏á
            self.total_quantity_label.config(text=f"‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {total_quantity:,.2f}", fg="blue",)
            self.total_sales_label.config(text=f"‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_sales:,.2f}", fg="red")
            
        except Exception as e:
            messagebox.showerror("Database Error", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

    def show_sales_summary(self):
        """‡πÅ‡∏™‡∏î‡∏á UI ‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏£‡∏ß‡∏°"""
        self.clear_content()

        # ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏ß‡∏°
        total_frame = tk.Frame(self.content_frame, bg="#e0f7ff")
        total_frame.pack(pady=10, fill="x", anchor="s")  # ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î

        self.total_quantity_label = tk.Label(total_frame, text="‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: 0", font=("KhanoonThin", 14), bg="#e0f7ff", fg="blue")
        self.total_quantity_label.pack(side="left", padx=20)

        self.total_sales_label = tk.Label(total_frame, text="‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: 0", font=("KhanoonThin", 14), bg="#e0f7ff", fg="red")
        self.total_sales_label.pack(side="left", padx=20)
        

        # ‡∏™‡πà‡∏ß‡∏ô Treeview ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
        columns = ("‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢", "‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°")
        self.summary_tree = ttk.Treeview(self.content_frame, columns=columns, show='headings', height=15)
        for col in columns:
            self.summary_tree.heading(col, text=col)
            if col == "‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤":
                self.summary_tree.column(col, width=15, anchor='center')
            elif col == "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤":
                self.summary_tree.column(col, width=50, anchor='center')
            elif col == "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà":
                self.summary_tree.column(col, width=50, anchor='center')
            elif col == "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤":
                self.summary_tree.column(col, width=80, anchor='center')
            elif col == "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢":
                self.summary_tree.column(col, width=60, anchor='center')
            elif col == "‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°":
                self.summary_tree.column(col, width=30, anchor='center')

        scrollbar = ttk.Scrollbar(self.content_frame, orient="vertical", command=self.summary_tree.yview)
        self.summary_tree.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side='right', fill='y')
        self.summary_tree.pack(fill="both", expand=True, padx=20, pady=10)

        # Style
        style = ttk.Style()
        style.configure("Treeview.Heading", font=("KhanoonThin", 12, "bold"))
        style.configure("Treeview", font=("KhanoonThin", 10), rowheight=25)

        # ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        filter_frame = tk.Frame(self.content_frame, bg="#e0f7ff")
        filter_frame.pack(pady=10, fill="x")

        # Filter: ‡∏õ‡∏µ
        self.year_filter = ttk.Combobox(filter_frame, values=["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "2024", "2025", "2026"], state="readonly")
        self.year_filter.set("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        self.year_filter.grid(row=0, column=0, padx=10)

        # Filter: ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        self.month_filter = ttk.Combobox(filter_frame, values=["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"], state="readonly")
        self.month_filter.set("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        self.month_filter.grid(row=0, column=1, padx=10)

        # Filter: ‡∏ß‡∏±‡∏ô
        self.day_filter = ttk.Combobox(filter_frame, values=["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31"], state="readonly")
        self.day_filter.set("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        self.day_filter.grid(row=0, column=2, padx=10)

        # Filter: ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô
        self.query_filter = tk.Entry(filter_frame, font=("KhanoonThin", 12))
        self.query_filter.grid(row=0, column=3, padx=10)

        # ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        # ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        self.filter_button = tk.Button(filter_frame, 
                                    text="‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", 
                                    font=("KhanoonThin", 12), 
                                    command=self.apply_filters,
                                    bg="#27ae60",  # ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
                                    fg="white",     # ‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≤‡∏ß
                                    padx=10, pady=15)
        self.filter_button.grid(row=0, column=4, padx=12)
        

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        self.populate_sales_summary()

    def apply_filters(self):
        """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"""
        day = self.day_filter.get()
        month = self.month_filter.get()
        year = self.year_filter.get()
        query = self.query_filter.get()
        self.populate_sales_summary(day=day, month=month, year=year, query=query)


    def search_show_sales_summary(self):
        query = self.search_summary_var.get().strip()
        day = self.filter_day.get()
        month = self.filter_month.get()
        year = self.filter_year.get()
        self.populate_sales_summary(day, month, year, query)

    def filter_show_sales_summary(self):
        day = self.filter_day.get()
        month = self.filter_month.get()
        year = self.filter_year.get()
        query = self.search_summary_var.get().strip()
        self.populate_sales_summary(day, month, year, query)

    
    # -------------------------------------------------------------------------
    #                          4) ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
    # -------------------------------------------------------------------------
    def logout(self):
        self.root.destroy()
        messagebox.showinfo("Log Out", "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
    

# =============================================================================
#               (1) AddEditUserWindow : ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (mangauser)
# =============================================================================
class AddEditUserWindow:
    def __init__(self, admin_page, mode, user_data=None):
        self.admin_page = admin_page
        self.mode = mode  # 'add' / 'edit'
        self.user_data = user_data

        self.window = tk.Toplevel(admin_page.root)
        self.window.title("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" if mode == "add" else "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
        center_window(self.window, 700, 600)  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô 700x600
        self.window.configure(bg="#e0f7ff")

        # ‡∏õ‡∏∏‡πà‡∏° Back
        tk.Button(
            self.window,
            text="Back",
            font=("KhanoonThin", 12),
            bg="#7f8c8d",
            fg="white",
            command=self.window.destroy,
            cursor="hand2",
            padx=10, pady=5
        ).pack(anchor='nw', padx=10, pady=10)

        # ‡∏ü‡∏≠‡∏£‡πå‡∏°
        form_frame = tk.Frame(self.window, bg="#e0f7ff")
        form_frame.pack(pady=20)

        # 1. ‡∏õ‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö 10 ‡∏´‡∏•‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        def create_label_entry(label_text, row, is_password=False):
            label = tk.Label(form_frame, text=label_text, font=("KhanoonThin", 12), bg="#e0f7ff")
            label.grid(row=row, column=0, padx=10, pady=10, sticky='e')
            if is_password:
                entry = tk.Entry(form_frame, font=("KhanoonThin", 12), width=30)  # ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ * ‡πÅ‡∏ï‡πà‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏´‡∏±‡∏™‡∏à‡∏£‡∏¥‡∏á
            else:
                entry = tk.Entry(form_frame, font=("KhanoonThin", 12), width=30)
            entry.grid(row=row, column=1, padx=10, pady=10)
            return entry

        # ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏•‡∏Ç
        def validate_phone_number(phone):
            if len(phone) != 10 or not phone.isdigit():
                return False
            return True

        # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å DateEntry ‡πÄ‡∏õ‡πá‡∏ô Entry ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY
        self.username_entry = create_label_entry("Username:", 0)
        self.fname_entry    = create_label_entry("First Name:", 1)
        self.lname_entry    = create_label_entry("Last Name:", 2)
        self.birth_entry = create_label_entry("Birth Date (DD/MM/YYYY):", 3)  # ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô Entry ‡πÅ‡∏ó‡∏ô DateEntry
        self.email_entry    = create_label_entry("Email:", 4)
        self.phone_entry    = create_label_entry("Phone Number:", 5)
        self.password_entry = create_label_entry("Password:", 6, is_password=True)

        if mode == "edit" and user_data:
            # user_data = [id, username, fname, lname, birth, email, phone, ...]
            self.username_entry.insert(0, user_data[1])
            self.fname_entry.insert(0,    user_data[2])
            self.lname_entry.insert(0,    user_data[3])
            self.birth_entry.insert(0,    user_data[4])  # ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY
            self.email_entry.insert(0,    user_data[5])
            self.phone_entry.insert(0,    user_data[6])
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ password ‡πÉ‡∏ô user_data index 7
            if len(user_data) > 7:
                self.password_entry.insert(0, user_data[7])

        # ‡∏õ‡∏∏‡πà‡∏° Save
        save_button = tk.Button(
            self.window,
            text="Save",
            font=("KhanoonThin", 12),
            bg="#27ae60",
            fg="white",
            command=self.save_user,
            cursor="hand2",
            padx=10, pady=5
        )
        save_button.pack(pady=20)

    def save_user(self):
        username = self.username_entry.get().strip()
        fname = self.fname_entry.get().strip()
        lname = self.lname_entry.get().strip()
        birth = self.birth_entry.get().strip()  # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Entry (‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î)
        email = self.email_entry.get().strip()
        phone = self.phone_entry.get().strip()
        password = self.password_entry.get().strip()

        # Validate and format birth date (check if it's in DD/MM/YYYY format)
        try:
            formatted_birth = datetime.strptime(birth, "%d/%m/%Y").strftime("%d/%m/%Y")  # Convert to DD/MM/YYYY format
        except ValueError:
            messagebox.showwarning("Birth Date Error", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY")
            return

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å
        if not username or not fname or not lname or not birth or not email or not phone or not password:
            messagebox.showwarning("Input Error", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
            return

        if '@' not in email or not email.endswith('.com'):
            messagebox.showwarning("Email Error", "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ @ ‡πÅ‡∏•‡∏∞‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢ .com)")
            return

        email_pattern = r'^[\w\.-]+@[\w\.-]+\.com$'
        if not re.match(email_pattern, email):
            messagebox.showwarning("Email Error", "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            return

        if len(phone) != 10 or not phone.isdigit():
            messagebox.showwarning("Phone Error", "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ 10 ‡∏´‡∏•‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
            return

        if len(password) < 10:
            messagebox.showwarning("Password Error", "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á >= 10 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")
            return

        try:
            conn = sqlite3.connect(r"D:\Project Pythonnnnnn\bookstore.db")
            cursor = conn.cursor()

            if self.mode == "add":
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö username ‡∏ã‡πâ‡∏≥
                cursor.execute("SELECT * FROM mangauser WHERE username = ?", (username,))
                if cursor.fetchone():
                    messagebox.showerror("Error", "Username ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß")
                    conn.close()
                    return

                cursor.execute("""
                    INSERT INTO mangauser (username, fname, lname, birth, email, phonenum, password, role)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                """, (username, fname, lname, formatted_birth, email, phone, password, 'user'))
                messagebox.showinfo("Success", "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

            elif self.mode == "edit" and self.user_data:
                user_id = self.user_data[0]
                cursor.execute("""
                    UPDATE mangauser
                    SET username=?, fname=?, lname=?, birth=?, email=?, phonenum=?, password=?
                    WHERE id=?
                """, (username, fname, lname, formatted_birth, email, phone, password, user_id))
                messagebox.showinfo("Success", "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

            conn.commit()
            conn.close()
            self.admin_page.populate_user_info()
            self.window.destroy()

        except sqlite3.IntegrityError:
            messagebox.showerror("Error", "Username ‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
        except Exception as e:
            messagebox.showerror("Database Error", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

# =============================================================================
#         (2) AddEditDeliveryAddressWindow : ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á (orders)
# =============================================================================
class AddEditDeliveryAddressWindow:
    def __init__(self, admin_page, mode, address_data=None):
        self.admin_page = admin_page
        self.mode = mode
        self.address_data = address_data
        self.current_user = current_user

        self.window = tk.Toplevel(admin_page.root)
        self.window.title("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á" if mode == "add" else "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á")
        center_window(self.window, 700, 600)
        self.window.configure(bg="#e0f7ff")

        # ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö
        tk.Button(
            self.window,
            text="Back",
            font=("KhanoonThin", 12),
            bg="#7f8c8d",
            fg="white",
            command=self.window.destroy,
            cursor="hand2",
            padx=10, pady=5
        ).pack(anchor='nw', padx=10, pady=10)

        # ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        form_frame = tk.Frame(self.window, bg="#e0f7ff")
        form_frame.pack(pady=20)

        def create_label_entry(label_text, row):
            label = tk.Label(form_frame, text=label_text, font=("KhanoonThin", 12), bg="#e0f7ff")
            label.grid(row=row, column=0, padx=10, pady=10, sticky='e')
            entry = tk.Entry(form_frame, font=("KhanoonThin", 12), width=30)
            entry.grid(row=row, column=1, padx=10, pady=10)
            return entry

        self.fullname_entry = create_label_entry("Full Name:", 1)
        self.house_number_entry = create_label_entry("House Number:", 2)
        self.subdistrict_entry = create_label_entry("Subdistrict:", 3)
        self.district_entry = create_label_entry("District:", 4)
        self.province_entry = create_label_entry("Province:", 5)
        self.postal_code_entry = create_label_entry("Postal Code:", 6)
        self.phone_entry = create_label_entry("Phone Number:", 7)

        if mode == "edit" and address_data:
            self.fullname_entry.insert(0, address_data[2])
            self.house_number_entry.insert(0, address_data[3])
            self.subdistrict_entry.insert(0, address_data[4])
            self.district_entry.insert(0, address_data[5])
            self.province_entry.insert(0, address_data[6])
            self.postal_code_entry.insert(0, address_data[7])
            self.phone_entry.insert(0, address_data[8])

        # ‡∏õ‡∏∏‡πà‡∏° Save
        save_button = tk.Button(
            self.window,
            text="Save",
            font=("KhanoonThin", 12),
            bg="#27ae60",
            fg="white",
            command=self.save_address,
            cursor="hand2",
            padx=10, pady=5
        )
        save_button.pack(pady=20)

    def save_address(self):
        if not self.current_user:  
            messagebox.showerror("Error", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
            return

        # ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
        fullname = self.fullname_entry.get().strip()
        house_number = self.house_number_entry.get().strip()
        subdistrict = self.subdistrict_entry.get().strip()
        district = self.district_entry.get().strip()
        province = self.province_entry.get().strip()
        postal_code = self.postal_code_entry.get().strip()
        phone = self.phone_entry.get().strip()

        if not fullname or not house_number or not subdistrict or not district or not province or not postal_code or not phone:
            messagebox.showwarning("Input Error", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
            return

        try:
            conn = sqlite3.connect("bookstore.db")
            cursor = conn.cursor()

            if self.mode == "add":
                # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡∏°‡πà
                cursor.execute("""
                    INSERT INTO user_address_new (username, fullname, house_number, subdistrict, district, province, postal_code, phone)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                """, (self.current_user, fullname, house_number, subdistrict, district, province, postal_code, phone))
            
            elif self.mode == "edit":
                # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
                address_id = self.address_data[0]  # ‡∏î‡∏∂‡∏á‡πÑ‡∏≠‡∏î‡∏µ‡∏à‡∏≤‡∏Å address_data
                cursor.execute("""
                    UPDATE user_address_new
                    SET fullname = ?, house_number = ?, subdistrict = ?, district = ?, province = ?, postal_code = ?, phone = ?
                    WHERE id = ? AND username = ?
                """, (fullname, house_number, subdistrict, district, province, postal_code, phone, address_id, self.current_user))

            conn.commit()
            conn.close()

            messagebox.showinfo("Success", "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            self.admin_page.populate_delivery_addresses()  # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
            self.window.destroy()

        except Exception as e:
            messagebox.showerror("Database Error", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")


# =============================================================================
#   (3) AddEditProductWindow : ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (products ‡πÉ‡∏ô bookstock.db)
# =============================================================================
class AddEditProductWindow:
    """
    ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö '‡πÄ‡∏û‡∏¥‡πà‡∏°' ‡∏´‡∏£‡∏∑‡∏≠ '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á products (DB: bookstock.db)
    """
    
    def initialize_database():
        conn = sqlite3.connect(r"D:\Project Pythonnnnnn\bookstore.db")
        cursor = conn.cursor()
    
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ 'image_path' ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á products ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        cursor.execute("PRAGMA table_info(products)")
        columns = [col[1] for col in cursor.fetchall()]
        if "image_path" not in columns:
            cursor.execute("ALTER TABLE products ADD COLUMN image_path TEXT")
            print("Added 'image_path' column to 'products' table.")

        conn.commit()
        conn.close()

    def __init__(self, admin_page, mode, product_data=None):
        self.admin_page = admin_page
        self.mode = mode
        self.product_data = product_data

        self.window = tk.Toplevel(admin_page.root)
        self.window.title("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" if mode == "add" else "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
        center_window(self.window, 700, 600)  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô 700x600
        self.window.configure(bg="#e0f7ff")

        # ‡∏õ‡∏∏‡πà‡∏° Back
        tk.Button(
            self.window,
            text="Back",
            font=("KhanoonThin", 12),
            bg="#7f8c8d",
            fg="white",
            command=self.window.destroy,
            cursor="hand2",
            padx=10, pady=5
        ).pack(anchor='nw', padx=10, pady=10)

        # ‡∏ü‡∏≠‡∏£‡πå‡∏°
        form_frame = tk.Frame(self.window, bg="#e0f7ff")
        form_frame.pack(pady=20)

        def create_label_entry(label_text, row):
            label = tk.Label(form_frame, text=label_text, font=("KhanoonThin", 12), bg="#e0f7ff")
            label.grid(row=row, column=0, padx=10, pady=10, sticky='e')
            entry = tk.Entry(form_frame, font=("KhanoonThin", 12), width=30)
            entry.grid(row=row, column=1, padx=10, pady=10)
            return entry

        self.code_entry     = create_label_entry("Code:", 0)
        self.name_entry     = create_label_entry("Name:", 1)
        self.genre_entry    = create_label_entry("Genre:", 2)
        self.price_entry    = create_label_entry("Price:", 3)
        self.quantity_entry = create_label_entry("Quantity:", 4)
        self.image_path_entry = create_label_entry("Image Path:", 5)

        # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û
        choose_image_button = tk.Button(
            form_frame,
            text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û",
            font=("KhanoonThin", 10),
            bg="#2980b9",
            fg="white",
            command=self.choose_image,
            cursor="hand2",
            padx=5, pady=2
        )
        choose_image_button.grid(row=5, column=2, padx=5, pady=10)

        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô edit ‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if mode == "edit" and product_data:
            self.code_entry.insert(0,       product_data[0])
            self.name_entry.insert(0,       product_data[1])
            self.genre_entry.insert(0,      product_data[2])
            self.price_entry.insert(0,      product_data[3])
            self.quantity_entry.insert(0,   product_data[4])
            if len(product_data) > 5:
                self.image_path_entry.insert(0, product_data[5])

        # ‡∏õ‡∏∏‡πà‡∏° Save
        save_button = tk.Button(
            self.window,
            text="Save",
            font=("KhanoonThin", 12),
            bg="#27ae60",
            fg="white",
            command=self.save_product,
            cursor="hand2",
            padx=10, pady=5
        )
        save_button.pack(pady=20)

    def choose_image(self):
        file_path = filedialog.askopenfilename(
            title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
            filetypes=[("Image Files", "*.png;*.jpg;*.jpeg;*.gif")]
        )
        if file_path:
            self.image_path_entry.delete(0, tk.END)
            self.image_path_entry.insert(0, file_path)

    def save_product(self):
        code     = self.code_entry.get().strip()
        name     = self.name_entry.get().strip()
        genre    = self.genre_entry.get().strip()
        price    = self.price_entry.get().strip()
        quantity = self.quantity_entry.get().strip()
        img_path = self.image_path_entry.get().strip()

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        if not code or not name or not genre or not price or not quantity:
            messagebox.showwarning("Input Error", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
            return

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤: ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç >=0 ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏µ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡πÑ‡∏î‡πâ
        try:
            price_val = float(price)
            if price_val < 0:
                raise ValueError
        except ValueError:
            messagebox.showwarning("Price Error", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö")
            return

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏° >=0
        if not quantity.isdigit():
            messagebox.showwarning("Quantity Error", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö")
            return
        quantity_val = int(quantity)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î 'add' ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡∏∞‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î 'edit' ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏¥‡∏°
        if self.mode == "add":
            if not img_path:
                messagebox.showwarning("Image Error", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
                return
            if not os.path.exists(img_path):
                messagebox.showwarning("Image Error", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
                return
        elif self.mode == "edit":
            if not img_path:
                # ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏¥‡∏°
                img_path = self.product_data[5] if len(self.product_data) > 5 else ""
            else:
                if not os.path.exists(img_path):
                    messagebox.showwarning("Image Error", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
                    return

        try:
            conn = sqlite3.connect(r"D:\Project Pythonnnnnn\bookstore.db")
            cursor = conn.cursor()

            if self.mode == "add":
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö code ‡∏ã‡πâ‡∏≥
                cursor.execute("SELECT * FROM products WHERE code = ?", (code,))
                if cursor.fetchone():
                    messagebox.showerror("Error", "‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
                    conn.close()
                    return

                cursor.execute("""
                    INSERT INTO products (code, name, genre, price, quantity, image_path)
                    VALUES (?, ?, ?, ?, ?, ?)
                """, (code, name, genre, price_val, quantity_val, img_path))
                messagebox.showinfo("Success", "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

            elif self.mode == "edit" and self.product_data:
                old_code = self.product_data[0]
                cursor.execute("""
                    UPDATE products
                    SET code=?, name=?, genre=?, price=?, quantity=?, image_path=?
                    WHERE code=?
                """, (code, name, genre, price_val, quantity_val, img_path, old_code))
                messagebox.showinfo("Success", "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

            conn.commit()
            conn.close()
            self.admin_page.populate_products()
            self.window.destroy()
            messagebox.showinfo("Success", "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        except sqlite3.IntegrityError:
            messagebox.showerror("Error", "‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
        except Exception as e:
            messagebox.showerror("Database Error", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    def save_order(self, total_price, discount, pickup_method):
        global current_user  # ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ global

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ username ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not current_user:
            messagebox.showerror("Error", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô")
            return

        try:
            conn = sqlite3.connect(r"D:\Project Pythonnnnnn\bookstore.db")
            cursor = conn.cursor()

            # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
            order_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

            # ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á orders
            cursor.execute("""
                INSERT INTO orders (username, order_time, pickup_method, total_price, discount)
                VALUES (?, ?, ?, ?, ?)
            """, (current_user, order_time, pickup_method, total_price, discount))
            
            conn.commit()
            conn.close()

            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            messagebox.showinfo("Success", "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

        except Exception as e:
            messagebox.showerror("Database Error", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: {e}")


# =============================================================================
#                         MAIN PROGRAM START
# =============================================================================
if __name__ == "__main__":
    root = tk.Tk()
    root.withdraw()  # ‡∏ã‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
    admin_page = AdminPage(root)  # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ Admin
    root.mainloop()
