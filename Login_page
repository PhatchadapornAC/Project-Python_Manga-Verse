import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk 
from tkcalendar import DateEntry 
import sqlite3
import subprocess
import os
from datetime import datetime
import json
import sys # เพิ่ม sys เพื่อจัดการ resource_path

# แนะนำ: ติดตั้ง bcrypt สำหรับ hash รหัสผ่าน
# pip install bcrypt
# import bcrypt

# --- Resource Path Management ---
def resource_path(relative_path):
    """
    Returns the absolute path to a resource, works for development and for PyInstaller.
    Images should be in an 'assets' folder in the same directory as this script.
    Database file should be in the same directory as this script.
    """
    try:
        # PyInstaller creates a temp folder and stores path in _MEIPASS
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)

# --- Global Variables for Images ---
# ประกาศตัวแปร global เพื่อเก็บ reference ของรูปภาพ
# มิฉะนั้น รูปภาพอาจถูก garbage-collected และไม่แสดงผล
bg_photo = None
eye_open_icon = None
eye_closed_icon = None
contact_image_data = None # เปลี่ยนชื่อเป็น _data เพื่อหลีกเลี่ยงชื่อทับกับฟังก์ชัน

# --- Helper Functions ---
def center_window(window, width, height):
    """Centers a Tkinter window on the screen."""
    window.update_idletasks()
    screen_width = window.winfo_screenwidth()
    screen_height = window.winfo_screenheight()
    x = int((screen_width / 2) - (width / 2))
    y = int((screen_height / 2) - (height / 2))
    window.geometry(f"{width}x{height}+{x}+{y}")

def load_image(relative_path, size):
    """
    Loads an image from the specified relative path and resizes it.
    Uses resource_path for platform-independent loading.
    """
    try:
        img_path = resource_path(relative_path)
        image = Image.open(img_path)
        image = image.resize(size, Image.LANCZOS)
        return ImageTk.PhotoImage(image)
    except FileNotFoundError:
        messagebox.showerror("Error", f"Image file not found: {relative_path}")
        return None
    except Exception as e:
        messagebox.showerror("Error", f"Failed to load image '{relative_path}': {e}")
        return None

def on_closing():
    """Handles the closing of the main window."""
    if messagebox.askokcancel("Exit", "คุณแน่ใจที่จะออกจากโปรแกรม?"):
        root.destroy()

# --- Page Navigation Functions ---
def open_home_page():
    """Opens the home_page.py script and closes the current window."""
    try:
        # Assuming home_page.py is in the same directory
        subprocess.Popen(['python', resource_path('home_page.py')])
        root.destroy()
    except Exception as e:
        messagebox.showerror("Error", f"ไม่สามารถเปิด Home Page ได้\n{e}")

def open_admin_page():
    """Opens the admin_page.py script and closes the current window."""
    try:
        # Assuming admin_page.py is in the same directory
        subprocess.Popen(['python', resource_path('admin_page.py')])
        root.destroy() # ปิดหน้า Login เมื่อเปิด Admin Page
    except Exception as e:
        messagebox.showerror("Error", f"ไม่สามารถเปิด Admin Page ได้\n{e}")

# --- Contact Image Display ---
signup_window = None
contact_image_label = None

def show_contact_image(parent_window):
    """Displays a contact image in a temporary frame."""
    global contact_image_label, contact_image_data # ต้องประกาศ global เพื่อเข้าถึงตัวแปร global

    if contact_image_label is not None and contact_image_label.winfo_exists():
        contact_image_label.lift()
        return

    # ตรวจสอบว่ารูปภาพถูกโหลดแล้วหรือไม่
    if contact_image_data is None:
        messagebox.showerror("Error", "Contact image not loaded.")
        return

    # สร้าง TopLevel window ใหม่สำหรับแสดง Contact US แทนที่จะวางบน parent_window โดยตรง
    # เพื่อให้จัดการการปิดและตำแหน่งง่ายขึ้น
    contact_toplevel = tk.Toplevel(parent_window)
    contact_toplevel.title("Contact Us")
    center_window(contact_toplevel, 850, 580) # ขนาดเท่ากับรูปภาพ
    contact_toplevel.resizable(False, False)
    contact_toplevel.grab_set() # ทำให้หน้าต่างนี้เป็น modal
    contact_toplevel.transient(parent_window)

    contact_image_label = tk.Label(contact_toplevel, image=contact_image_data, bg="#fff")
    contact_image_label.pack(fill="both", expand=True) # ให้ Label ขยายเต็ม Toplevel

    # ปุ่มปิดบน Toplevel
    close_button = tk.Button(contact_toplevel, text="❌", font=("Wonderful Future", 14), bg="#fd5c70", fg="white",
                             command=contact_toplevel.destroy, cursor="hand2")
    # ตำแหน่งปุ่มปิดบน Toplevel (adjust position as needed)
    close_button.place(x=contact_toplevel.winfo_width() - 40, y=10)


# --- Database Operations ---
# ฟังก์ชันนี้จะจัดการเส้นทางฐานข้อมูลให้ถูกต้อง
DATABASE_PATH = resource_path('bookstore.db')

def get_db_connection():
    """Establishes a connection to the SQLite database."""
    try:
        conn = sqlite3.connect(DATABASE_PATH)
        return conn
    except sqlite3.Error as e:
        messagebox.showerror("Database Error", f"Cannot connect to database: {e}")
        return None

def log_user_activity(username, action):
    """Logs user activities (e.g., login, logout, order) to the database."""
    conn = get_db_connection()
    if conn:
        try:
            c = conn.cursor()
            c.execute('''
                INSERT INTO user_activity (username, action, timestamp)
                VALUES (?, ?, ?)
            ''', (username, action, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
            conn.commit()
        except sqlite3.Error as e:
            print(f"Error logging activity: {e}")
        finally:
            conn.close()

# ประกาศ current_user ให้เป็น global
current_user = None

# ฟังก์ชันสำหรับบันทึก current_user ลงในไฟล์ JSON
def save_current_user(username):
    """Saves the current logged-in username to a JSON file."""
    data = {"current_user": username}
    try:
        with open(resource_path("current_user.json"), "w") as f:
            json.dump(data, f)
    except IOError as e:
        messagebox.showerror("File Error", f"Could not save user data: {e}")

# --- Authentication Functions ---
def login():
    """Handles user login authentication."""
    global current_user

    username = username_entry.get().strip()
    password = password_entry.get().strip()

    if not username or not password:
        messagebox.showwarning("Input Error", "กรุณากรอกข้อมูลให้ครบทุกช่อง")
        return

    conn = get_db_connection()
    if conn:
        try:
            c = conn.cursor()
            c.execute("SELECT password, role FROM mangauser WHERE username = ?", (username,))
            result = c.fetchone()

            if result:
                stored_hashed_password, user_role = result
                # ==== IMPORTANT: Use bcrypt for secure password verification ====
                # If you stored passwords as plain text:
                if stored_hashed_password == password: # Change here if using bcrypt for verification
                # If you stored passwords as hashed:
                # if bcrypt.checkpw(password.encode('utf-8'), stored_hashed_password.encode('utf-8')):
                    current_user = username
                    log_user_activity(current_user, 'login')
                    save_current_user(current_user)

                    if user_role == 'admin':
                        messagebox.showinfo("Login Success", "คุณเข้าสู่ระบบ Admin แล้ว!")
                        open_admin_page()
                    else:
                        messagebox.showinfo("Login Success", "คุณเข้าสู่ระบบสำเร็จแล้ว!")
                        open_home_page()
                else:
                    messagebox.showerror("Login Error", "รหัสผ่านของคุณไม่ถูกต้อง")
                    password_entry.delete(0, tk.END)
            else:
                messagebox.showerror("Login Error", "ไม่พบชื่อผู้ใช้ในระบบ")
                username_entry.delete(0, tk.END)
        except sqlite3.Error as e:
            messagebox.showerror("Database Error", f"เกิดข้อผิดพลาด: {e}")
        finally:
            conn.close()

def forgot_password():
    """Opens a window for resetting user password."""
    reset_window = tk.Toplevel(root)
    reset_window.title("Reset Password")
    center_window(reset_window, 700, 480)
    reset_window.configure(bg="#e0f7ff")
    reset_window.transient(root)
    reset_window.grab_set()
    reset_window.resizable(False, False)

    background_image_reset = load_image("assets/repass11.png", (700, 480))
    if background_image_reset:
        bg_label = tk.Label(reset_window, image=background_image_reset)
        bg_label.place(x=0, y=0, relwidth=1, relheight=1)
        bg_label.image = background_image_reset # Keep a reference

    tk.Label(reset_window, text="Username :", font=("Wonderful Future", 15), bg="white").place(x=100, y=170)
    username_entry_reset = tk.Entry(reset_window, font=("KhanoonThin", 14), width=25, bg="#c9e0ff")
    username_entry_reset.place(x=260, y=170)

    tk.Label(reset_window, text="New Password :", font=("Wonderful Future", 15), bg="white").place(x=100, y=250)
    password_frame_reset = tk.Frame(reset_window, bg="white")
    password_frame_reset.place(x=260, y=250)
    new_password_entry = tk.Entry(password_frame_reset, show="*", font=("KhanoonThin", 14), width=20, bg="#c9e0ff")
    new_password_entry.pack(side="left", fill="x", expand=True)

    def toggle_password_reset():
        if new_password_entry.cget('show') == "*":
            new_password_entry.config(show="")
            toggle_button_reset.config(image=eye_open_icon)
        else:
            new_password_entry.config(show="*")
            toggle_button_reset.config(image=eye_closed_icon)

    toggle_button_reset = tk.Button(password_frame_reset, image=eye_closed_icon, bg="white", relief="flat",
                                    command=toggle_password_reset, cursor="hand2")
    toggle_button_reset.pack(side="right", padx=5)

    def save_new_password():
        username = username_entry_reset.get().strip()
        new_password = new_password_entry.get().strip()

        if not username or not new_password:
            messagebox.showwarning("Input Error", "กรุณากรอกข้อมูลให้ครบทุกช่อง", parent=reset_window)
            return

        if len(new_password) < 10:
            messagebox.showwarning("Password Error", "กรุณากรอกรหัสผ่านให้ครบ 10 ตัวขึ้นไป", parent=reset_window)
            return

        conn = get_db_connection()
        if conn:
            try:
                c = conn.cursor()
                c.execute("SELECT * FROM mangauser WHERE username = ?", (username,))
                result = c.fetchone()

                if not result:
                    messagebox.showwarning("Username Error", "ไม่พบชื่อผู้ใช้ของคุณในระบบ", parent=reset_window)
                    return

                # Hash the new password (RECOMMENDED)
                # hashed_password = bcrypt.hashpw(new_password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
                # c.execute("UPDATE mangauser SET password = ? WHERE username = ?", (hashed_password, username))

                # If you prefer plain text (NOT RECOMMENDED for production):
                c.execute("UPDATE mangauser SET password = ? WHERE username = ?", (new_password, username))


                conn.commit()
                messagebox.showinfo("Success", f"รีเซ็ตรหัสผ่าน '{username}' เรียบร้อย", parent=reset_window)
                reset_window.destroy()
            except sqlite3.Error as e:
                messagebox.showerror("Database Error", f"เกิดข้อผิดพลาด: {e}", parent=reset_window)
            finally:
                conn.close()

    tk.Button(reset_window, text="Back", font=("Wonderful Future", 14), bg="#f15267", fg="white",
              command=reset_window.destroy).place(x=270, y=320)
    tk.Button(reset_window, text="Submit", font=("Wonderful Future", 14), bg="#4ab662", fg="white",
              command=save_new_password).place(x=380, y=320)

def open_signup_window():
    """Opens the user registration window."""
    global signup_window, eye_open_icon, eye_closed_icon # Ensure icons are accessible

    if signup_window is not None and tk.Toplevel.winfo_exists(signup_window):
        signup_window.lift()
        return

    signup_window = tk.Toplevel(root)
    signup_window.title("Mangaverse Book Shop - Sign Up")
    center_window(signup_window, 1200, 800)
    signup_window.configure(bg="#e0f7ff")
    signup_window.transient(root)
    signup_window.grab_set()
    signup_window.resizable(False, False)

    def sign_up():
        username = username_entry_signup.get().strip()
        first_name = first_name_entry.get().strip()
        last_name = last_name_entry.get().strip()
        dob = dob_entry.get().strip()
        email = email_entry.get().strip()
        phone = phone_entry.get().strip()
        password = password_entry_signup.get().strip()
        role = 'admin' if username == 'admin' else 'user'

        if not all([username, first_name, last_name, dob, email, phone, password]):
            messagebox.showwarning("Input Error", "กรุณากรอกข้อมูลให้ครบถ้วน", parent=signup_window)
            return

        if '@' not in email or '.' not in email.split('@')[-1]:
            messagebox.showwarning("Email Error", "อีเมลของคุณไม่ถูกต้อง กรุณาใส่ @ และ .", parent=signup_window)
            return

        if not (len(phone) == 10 and phone.isdigit()):
            messagebox.showwarning("Phone Error", "เบอร์โทรไม่ถูกต้อง (ต้องเป็นตัวเลข 10 หลัก)", parent=signup_window)
            return

        if len(password) < 10:
            messagebox.showwarning("Password Error", "รหัสผ่านต้อง >= 10 ตัวอักษร", parent=signup_window)
            return

        conn = get_db_connection()
        if conn:
            try:
                c = conn.cursor()
                # Hash the password (RECOMMENDED)
                # hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
                # c.execute("""
                #     INSERT INTO mangauser (username, fname, lname, birth, email, phonenum, password, role)
                #     VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                # """, (username, first_name, last_name, dob, email, phone, hashed_password, role))

                # If you prefer plain text (NOT RECOMMENDED for production):
                c.execute("""
                    INSERT INTO mangauser (username, fname, lname, birth, email, phonenum, password, role)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                """, (username, first_name, last_name, dob, email, phone, password, role))

                conn.commit()
                messagebox.showinfo("Sign Up Success", "คุณลงทะเบียนสำเร็จแล้ว", parent=signup_window)
                signup_window.destroy()
            except sqlite3.IntegrityError:
                messagebox.showerror("Error", "ชื่อผู้ใช้ถูกใช้แล้ว", parent=signup_window)
            except sqlite3.Error as e:
                messagebox.showerror("DB Error", f"เกิดข้อผิดพลาด: {e}", parent=signup_window)
            finally:
                conn.close()

    signup_bg_photo = load_image("assets/12456.png", (1200, 800))
    user_icon_signup = load_image("assets/username.png", (80, 80))

    if signup_bg_photo:
        bg_label_signup = tk.Label(signup_window, image=signup_bg_photo)
        bg_label_signup.place(x=0, y=0, relwidth=1, relheight=1)
        bg_label_signup.image = signup_bg_photo # Keep a reference

    signup_frame = tk.Frame(signup_window, bg="#5271ff", bd=0, relief="groove")
    signup_frame.place(x=200, y=240, width=800, height=360)

    if user_icon_signup:
        user_icon_label = tk.Label(signup_frame, image=user_icon_signup, bg="#5271ff")
        user_icon_label.place(x=20, y=35)
        user_icon_label.image = user_icon_signup # Keep a reference

    def create_entry(parent_frame, label_text, x, y):
        label = tk.Label(parent_frame, text=label_text, bg="#5271ff", font=("Wonderful Future", 15, "bold"), fg="white")
        label.place(x=x, y=y)
        entry = tk.Entry(parent_frame, font=("KhanoonThin", 15), width=20, relief="solid")
        entry.place(x=x + 130, y=y)
        return entry

    username_entry_signup = create_entry(signup_frame, "Username :", 120, 60)
    first_name_entry = create_entry(signup_frame, "First name :", 35, 140)
    last_name_entry = create_entry(signup_frame, "Last name :", 440, 140)

    dob_label = tk.Label(signup_frame, text="Date of birth :", bg="#5271ff", font=("Wonderful Future", 15, "bold"), fg="white")
    dob_label.place(x=35, y=210)
    dob_entry = DateEntry(signup_frame, width=18, font=("KhanoonThin", 15),
                          date_pattern='dd/MM/yyyy', background='#004aad', foreground='white', borderwidth=2)
    dob_entry.place(x=190, y=210)

    email_entry = create_entry(signup_frame, "E-mail :", 440, 210)
    phone_label = tk.Label(signup_frame, text="Phone number :", bg="#5271ff", font=("Wonderful Future", 15, "bold"), fg="white")
    phone_label.place(x=35, y=280)
    phone_entry = tk.Entry(signup_frame, font=("KhanoonThin", 15), width=20, relief="solid")
    phone_entry.place(x=200, y=280)

    password_label = tk.Label(signup_frame, text="Password :", bg="#5271ff", font=("Wonderful Future", 15, "bold"), fg="white")
    password_label.place(x=440, y=280)
    password_frame_signup = tk.Frame(signup_frame, bg="#5271ff")
    password_frame_signup.place(x=560, y=280)
    password_entry_signup = tk.Entry(password_frame_signup, show="*", font=("KhanoonThin", 15), width=18, relief="solid")
    password_entry_signup.pack(side="left")

    toggle_button_signup = tk.Button(password_frame_signup, image=eye_closed_icon, bg="#5271ff", relief="flat",
                                    command=lambda: toggle_password(password_entry_signup, toggle_button_signup))
    toggle_button_signup.pack(side="right", padx=5)

    tk.Button(signup_window, text="Sign up", font=("Wonderful Future", 15),
              bg="#482188", fg="white", width=10, command=sign_up).place(x=920, y=650)
    tk.Button(signup_window, text="Contact us", font=("Wonderful Future", 14),
              bg="#004aad", fg="white", command=lambda: show_contact_image(signup_window)).place(x=100, y=750)
    tk.Button(signup_window, text="Exit", font=("Wonderful Future", 14),
              bg="#004aad", fg="white", command=signup_window.destroy).place(x=1120, y=750)
    tk.Button(signup_window, text="Back", font=("Wonderful Future", 14),
              bg="#004aad", fg="white", command=signup_window.destroy).place(x=20, y=750)

def toggle_password(entry, button):
    """Toggles visibility of password entry field."""
    if entry.cget('show') == "*":
        entry.config(show="")
        button.config(image=eye_open_icon)
    else:
        entry.config(show="*")
        button.config(image=eye_closed_icon)

# --- Database & Admin User Setup ---
def setup_database():
    """Ensures the database and admin user are correctly set up."""
    conn = get_db_connection()
    if conn:
        c = conn.cursor()
        c.execute('''
            CREATE TABLE IF NOT EXISTS mangauser (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                fname TEXT,
                lname TEXT,
                birth TEXT,
                email TEXT,
                phonenum TEXT,
                password TEXT NOT NULL, -- Store hashed password here
                role TEXT DEFAULT 'user'
            )
        ''')
        c.execute('''
            CREATE TABLE IF NOT EXISTS user_activity (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                action TEXT NOT NULL,
                timestamp TEXT NOT NULL
            )
        ''')
        conn.commit()

        # สร้างบัญชี admin หากยังไม่มี
        try:
            admin_username = "admin"
            admin_password_plain = "admin12345" # Plain text for initial setup

            # Hash the admin password (RECOMMENDED)
            # hashed_admin_password = bcrypt.hashpw(admin_password_plain.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
            # c.execute("INSERT INTO mangauser (username, fname, lname, birth, email, phonenum, password, role) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
            #           (admin_username, 'Admin', 'User', '01/01/04', 'admin@gmail.com', '0123456789', hashed_admin_password, 'admin'))

            # If you prefer plain text (NOT RECOMMENDED for production):
            c.execute("INSERT INTO mangauser (username, fname, lname, birth, email, phonenum, password, role) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
                      (admin_username, 'Admin', 'User', '01/01/04', 'admin@gmail.com', '0123456789', admin_password_plain, 'admin'))

            conn.commit()
            print("Admin account created successfully!")
        except sqlite3.IntegrityError:
            print("Admin account already exists. Updating password...")
            # If admin exists, ensure its password is updated (e.g., if you change initial setup password)
            # hashed_admin_password = bcrypt.hashpw(admin_password_plain.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
            # c.execute("UPDATE mangauser SET password = ? WHERE username = ?", (hashed_admin_password, admin_username))
            c.execute("UPDATE mangauser SET password = ? WHERE username = ?", (admin_password_plain, admin_username))
            conn.commit()
            print("Admin account password updated.")
        except sqlite3.Error as e:
            print(f"Error setting up admin user: {e}")
        finally:
            conn.close()

# ========================== MAIN PROGRAM START ==========================
if __name__ == "__main__":
    root = tk.Tk()
    root.withdraw() # ซ่อนหน้าต่างหลักชั่วคราว
    root.title("Mangaverse Book Shop")
    root.configure(bg="#e0f7ff")
    root.resizable(False, False) # ห้ามปรับขนาดหน้าต่างหลัก

    setup_database() # ตั้งค่าฐานข้อมูลและสร้าง admin user

    # โหลดรูปภาพทั้งหมดเมื่อโปรแกรมเริ่มต้น
    bg_photo = load_image("assets/226.png", (1200, 800))
    eye_open_icon = load_image("assets/open eye.png", (35, 20))
    eye_closed_icon = load_image("assets/closed eye.png", (35, 20))
    contact_image_data = load_image("assets/contact us.png", (850, 580))

    # ตรวจสอบว่ารูปภาพโหลดสำเร็จหรือไม่
    if not all([bg_photo, eye_open_icon, eye_closed_icon, contact_image_data]):
        messagebox.showerror("Initialization Error", "รูปภาพที่จำเป็นบางส่วนไม่สามารถโหลดได้ โปรดตรวจสอบโฟลเดอร์ 'assets' และไฟล์รูปภาพ")
        root.destroy()
        sys.exit(1) # ออกจากโปรแกรมถ้าโหลดรูปภาพไม่สำเร็จ

    # Display background image
    bg_label = tk.Label(root, image=bg_photo)
    bg_label.place(x=0, y=0, relwidth=1, relheight=1)
    # Don't need to keep a reference to bg_label.image if bg_photo is global
    # bg_label.image = bg_photo

    # Login Frame
    login_frame = tk.Frame(root, bg="#5271ff", bd=0, relief="groove")
    login_frame.place(x=400, y=330, width=450, height=240)

    tk.Label(login_frame, text="Username", bg="#5271ff", font=("Wonderful Future", 25), fg="white").pack(pady=5)
    username_entry = tk.Entry(login_frame, font=("KhanoonThin", 20), width=30, relief="solid", bd=2, highlightthickness=2)
    username_entry.pack(pady=5)

    tk.Label(login_frame, text="Password", bg="#5271ff", font=("Wonderful Future", 25), fg="white").pack(pady=5)

    password_frame = tk.Frame(login_frame, bg="#5271ff")
    password_frame.pack(pady=5)
    password_entry = tk.Entry(password_frame, show="*", font=("KhanoonThin", 20), width=30, relief="solid", bd=2, highlightthickness=2)
    password_entry.pack(side="left", fill="x", expand=True)

    toggle_button = tk.Button(password_frame, image=eye_closed_icon, bg="#5271ff",
                              relief="flat", command=lambda: toggle_password(password_entry, toggle_button))
    toggle_button.pack(side="right", padx=5)

    # Buttons
    tk.Button(root, text="Sign In", font=("Wonderful Future", 15),
              bg="#482188", fg="white", width=10, command=login).place(x=450, y=600)
    tk.Button(root, text="Sign Up", font=("Wonderful Future", 15),
              bg="#482188", fg="white", width=10, command=open_signup_window).place(x=650, y=600)

    forgot_password_link = tk.Label(root, text="Forgot password?", fg="grey", bg="#e0f7ff",
                                    font=("KhanoonThin", 12), cursor="hand2")
    forgot_password_link.place(x=550, y=660)
    forgot_password_link.bind("<Button-1>", lambda e: forgot_password())

    tk.Button(root, text="Contact us", font=("Wonderful Future", 14),
              bg="#004aad", fg="white", command=lambda: show_contact_image(root)).place(x=20, y=750)
    tk.Button(root, text="Exit", font=("Wonderful Future", 14),
              bg="#004aad", fg="white", command=on_closing).place(x=1120, y=750)

    # Set window to center and then show it
    center_window(root, 1200, 800)
    root.deiconify() # แสดงหน้าต่างหลัก
    root.protocol("WM_DELETE_WINDOW", on_closing) # Handle standard close button
    root.mainloop()
